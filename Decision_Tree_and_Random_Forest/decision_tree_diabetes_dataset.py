# -*- coding: utf-8 -*-
"""Decision_Tree_Diabetes_Dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kvK3KRN6Wa8ISZg0oKU_2pSNII-0CGaW
"""

from google.colab import files

# upload a file
upload = files.upload()

# Commented out IPython magic to ensure Python compatibility.
import numpy as np

import pandas as pd

import matplotlib.pyplot as plt
# %matplotlib inline

import seaborn as sns

from sklearn import tree

from sklearn.tree import DecisionTreeClassifier

from sklearn.ensemble import RandomForestClassifier

from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import GridSearchCV

from sklearn.model_selection import train_test_split

from sklearn.metrics import roc_auc_score, roc_curve, classification_report, confusion_matrix

diabetes_df = pd.read_csv("Dataset_Diabetes_Diabetic_Data.csv")
diabetes_df

diabetes_df.info()

diabetes_df.isna().sum()

# Are there any duplicates ?

duplicate_rows = diabetes_df[diabetes_df.duplicated()]
num_duplicates = diabetes_df.duplicated().sum()
print("Total number of duplicate rows: ", num_duplicates)
duplicate_rows

print('Number of unique values of diabatic feature in diabetes_df- ', diabetes_df['diabatic'].nunique())
print('\nThe unique values of diabatic feature in diabetes_df-', diabetes_df['diabatic'].unique())
print('\nCount of the unique values of diabatic feature in diabetes_df- ',  diabetes_df['diabatic'].value_counts())
print('\nThe distribution of diabatic feature in diabetes_df- ',  diabetes_df['diabatic'].value_counts(normalize = True))

plt.figure(figsize = (6, 3))
sns.countplot(x = 'diabatic', data = diabetes_df)
plt.title('Count plot indicating number of patients suffering from diabetes')

"""As per the given data, 67% of the patient mentioned in the dataset are Diabetic."""

# Dropping the unwanted variable patient_nbr

diabetes_df.drop(["patient_nbr"], axis = 1, inplace = True)

for col in diabetes_df.columns:
  if diabetes_df[col].dtype == 'object':
    print(col)



print('The number of unique values in admission_type_id are: {}'.format(diabetes_df['admission_type_id'].nunique()))
print('The unique values in admission_type_id are: {}'.format(diabetes_df['admission_type_id'].unique()))
print('Count of the unique values in admission_type_id are {}'.format(diabetes_df['admission_type_id'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'admission_type_id', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the type of admission')

print('The number of unique values in discharge_disposition_id are: {}'.format(diabetes_df['discharge_disposition_id'].nunique()))
print('The unique values in discharge_disposition_id are: {}'.format(diabetes_df['discharge_disposition_id'].unique()))
print('Count of the unique values in discharge_disposition_id are {}'.format(diabetes_df['discharge_disposition_id'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'discharge_disposition_id', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the type of discharge disposition')

print('The number of unique values in admission_source_id are: {}'.format(diabetes_df['admission_source_id'].nunique()))
print('The unique values in admission_source_id are: {}'.format(diabetes_df['admission_source_id'].unique()))
print('Count of the unique values in admission_source_id are {}'.format(diabetes_df['admission_source_id'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'admission_source_id', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the type of admission')

print('The number of unique values in time_in_hospital are: {}'.format(diabetes_df['time_in_hospital'].nunique()))
print('The unique values in time_in_hospital are: {}'.format(diabetes_df['time_in_hospital'].unique()))
print('Count of the unique values in time_in_hospital are {}'.format(diabetes_df['time_in_hospital'].value_counts().sort_values()))
plt.figure(figsize = (12, 5))
sns.countplot(x = 'time_in_hospital', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the number of days spend in hospital')

print('The number of unique values in num_lab_procedures are: {}'.format(diabetes_df['num_lab_procedures'].nunique()))
print('The unique values in num_lab_procedures are: {}'.format(diabetes_df['num_lab_procedures'].unique()))
print('Count of the unique values in num_lab_procedures are {}'.format(diabetes_df['num_lab_procedures'].value_counts().sort_values()))
plt.figure(figsize = (14, 25))
sns.countplot(y = 'num_lab_procedures', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the number of lab tests performed during the stay in the hospital')

print('The number of unique values in num_procedures are: {}'.format(diabetes_df['num_procedures'].nunique()))
print('The unique values in num_procedures are: {}'.format(diabetes_df['num_procedures'].unique()))
print('Count of the unique values in num_procedures are {}'.format(diabetes_df['num_procedures'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'num_procedures', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the number of procedures (other than lab tests) performed during the stay in the hospital')

print('The number of unique values in num_medications are: {}'.format(diabetes_df['num_medications'].nunique()))
print('The unique values in num_medications are: {}'.format(diabetes_df['num_medications'].unique()))
print('Count of the unique values in num_medications are {}'.format(diabetes_df['num_medications'].value_counts().sort_values()))
plt.figure(figsize = (18, 8))
sns.countplot(x = 'num_medications', data = diabetes_df, hue = 'diabatic')
plt.grid()
plt.title('Distribution of the number of distinct generic names administered during the encounter')

print('The number of unique values in number_outpatient are: {}'.format(diabetes_df['number_outpatient'].nunique()))
print('The unique values in number_outpatient are: {}'.format(diabetes_df['number_outpatient'].unique()))
print('Count of the unique values in number_outpatient are {}'.format(diabetes_df['number_outpatient'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'number_outpatient', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the number of outpatient visits of the patient in the year preceding the encounter')

print('The number of unique values in number_emergency are: {}'.format(diabetes_df['number_emergency'].nunique()))
print('The unique values in number_emergency are: {}'.format(diabetes_df['number_emergency'].unique()))
print('Count of the unique values in number_emergency are {}'.format(diabetes_df['number_emergency'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'number_emergency', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the number of emergency visits of the patient in the year preceding the encounter')

print('The number of unique values in number_inpatient are: {}'.format(diabetes_df['number_inpatient'].nunique()))
print('The unique values in number_inpatient are: {}'.format(diabetes_df['number_inpatient'].unique()))
print('Count of the unique values in number_inpatient are {}'.format(diabetes_df['number_inpatient'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'number_inpatient', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the number of inpatient visits of the patient in the year preceding the encounter')

print('The number of unique values in number_diagnoses are: {}'.format(diabetes_df['number_diagnoses'].nunique()))
print('The unique values in number_diagnoses are: {}'.format(diabetes_df['number_diagnoses'].unique()))
print('Count of the unique values in number_diagnoses are {}'.format(diabetes_df['number_diagnoses'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'number_diagnoses', data = diabetes_df, hue = 'diabatic')
plt.title('Number of diagnoses entered to the system')

print('The number of unique values in race are: {}'.format(diabetes_df['race'].nunique()))
print('The unique values in race are: {}'.format(diabetes_df['race'].unique()))
print('Count of the unique values in race are {}'.format(diabetes_df['race'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'race', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the race of the patient')

"""The variable "race" has invalid character "?"

"""

print('The number of unique values in gender are: {}'.format(diabetes_df['gender'].nunique()))
print('The unique values in gender are: {}'.format(diabetes_df['gender'].unique()))
print('Count of the unique values in gender are {}'.format(diabetes_df['gender'].value_counts().sort_values()))
plt.figure(figsize = (8, 3))
sns.countplot(x = 'gender', data = diabetes_df, hue = 'diabatic')
plt.title('Distribution of the gender of the patient')

print('The number of unique values in age are: {}'.format(diabetes_df['age'].nunique()))
print('The unique values in age are: {}'.format(diabetes_df['age'].unique()))
print('Count of the unique values in age are {}'.format(diabetes_df['age'].value_counts().sort_values()))
plt.figure(figsize = (10, 4))
sns.countplot(x = 'age', data = diabetes_df, stat = 'count', hue = 'diabatic')
plt.title('Distribution of the age of the patient')

print('The number of unique values in diag_1 are: {}'.format(diabetes_df['diag_1'].nunique()))
print('The unique values in diag_1 are: {}'.format(diabetes_df['diag_1'].unique()))
print('Count of the unique values in diag_1 are {}'.format(diabetes_df['diag_1'].value_counts().sort_values()))

print('The number of unique values in diag_2 are: {}'.format(diabetes_df['diag_2'].nunique()))
print('The unique values in diag_2 are: {}'.format(diabetes_df['diag_2'].unique()))
print('Count of the unique values in diag_2 are {}'.format(diabetes_df['diag_2'].value_counts().sort_values()))

print('The number of unique values in diag_3 are: {}'.format(diabetes_df['diag_3'].nunique()))
print('The unique values in diag_3 are: {}'.format(diabetes_df['diag_3'].unique()))
print('Count of the unique values in diag_3 are {}'.format(diabetes_df['diag_3'].value_counts().sort_values()))

print('The number of unique values in change are: {}'.format(diabetes_df['change'].nunique()))
print('The unique values in change are: {}'.format(diabetes_df['change'].unique()))
print('Count of the unique values in change are {}'.format(diabetes_df['change'].value_counts().sort_values()))
plt.figure(figsize = (8, 4))
sns.countplot(x = 'change', data = diabetes_df, hue = 'diabatic')
plt.title('Count plot indicating if there was a change in diabetic medications (either dosage or generic name)')

"""diag1, diag2 and diag3 has invalid character "?".
diag1, diag2, diag3 — are categorical and have a lot of values.
We will remove the above categorial variables and use number_diagnoses to capture some of this information.

"""

diabetes_df.drop(["diag_1","diag_2","diag_3"], axis=1, inplace = True)
print('After removing the columns the reduced size of diabetes_df is: ', diabetes_df.shape)

"""The variable "race" has invalid character "?". Replacing "?" with "Nan" and remove all missing values."""

diabetes_df['race'] = diabetes_df['race'].replace(to_replace = '?', value =np.nan)
diabetes_df.dropna(inplace=True)

print('After removing the data points having ? in the race variable, the reduced shape of the diabetes_df is:', diabetes_df.shape)

# Are there any duplicates ?

dups = diabetes_df.duplicated()
print('Number of duplicate rows = %d' % (dups.sum()))
diabetes_df[dups]

diabetes_df.drop_duplicates(keep = 'first', inplace = True)

print('After removing the duplicate data points from diabetes_df the reduced shape of diabetes_df is:', diabetes_df.shape)

diabetes_df[['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'number_diagnoses']].describe()

sns.pairplot(diabetes_df[['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'number_diagnoses']])

# construct box plot for continuous variables

plt.figure(figsize = (12, 8))
sns.boxplot(data = diabetes_df[['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'number_diagnoses']], orient = 'h')

plt.figure(figsize = (10, 4))
sns.heatmap(diabetes_df[['time_in_hospital', 'num_lab_procedures', 'num_procedures', 'num_medications', 'number_outpatient', 'number_emergency', 'number_inpatient', 'number_diagnoses']].corr(), annot = True)
plt.title('Heat map diplaying the correlation between the variables in the dataframe')

# Converting the object types to categorical types

for feature in diabetes_df.columns:
  if diabetes_df[feature].dtype == 'object':
    print('feature: ', feature)
    print(pd.Categorical(diabetes_df[feature].unique()))
    print(pd.Categorical(diabetes_df[feature].unique()).codes)
    diabetes_df[feature] = pd.Categorical(diabetes_df[feature]).codes
    print('\n\n')

diabetes_df.head(10)

diabetes_df.info()

X = diabetes_df.drop('diabatic', axis = 1)
X

y = diabetes_df['diabatic']
y

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 1)

print('X_train.shape: ', X_train.shape)
X_train

print('y_train.shape: ', y_train.shape)
y_train

print('X_test.shape: ', X_test.shape)
X_test

print('y_test.shape: ', y_test.shape)
y_test

dtcl = DecisionTreeClassifier(random_state=1)
dtcl.fit(X_train, y_train)

# dtcl model's prediction on training data

y_train_predict = dtcl.predict(X_train)
y_train_predict

# dtcl model's prediction on taining data

conf_train = pd.DataFrame(confusion_matrix(y_train, y_train_predict), columns = [['0', '1']], index = [['0', '1']])
conf_train

print(classification_report(y_train, y_train_predict))

# dtcl model's prediction probability on training data

y_train_predict_prob = dtcl.predict_proba(X_train)
y_train_predict_prob_pos = y_train_predict_prob[:, 1]
auc_score_train = roc_auc_score(y_train, y_train_predict_prob_pos)
print('auc_score of dtcl model on training data: ', auc_score_train)

fpr, tpr, thresholds = roc_curve(y_train, y_train_predict_prob_pos)

plt.plot([0, 1], [0, 1], linestyle = '--')
plt.plot(fpr, tpr, marker = '*')
plt.title('ROC curve of dtcl model on training data.')

# dtcl model's prediction on test data

y_test_predict = dtcl.predict(X_test)
y_test_predict

# dtcl model's prediction on test data

conf_test = pd.DataFrame(confusion_matrix(y_test, y_test_predict), columns = [['0', '1']], index = [['0', '1']])
conf_test

print(classification_report(y_test, y_test_predict))

# dtcl model's prediction probability on test data

y_test_predict_prob = dtcl.predict_proba(X_test)
y_test_predict_prob_pos = y_test_predict_prob[:, 1]
auc_score_test = roc_auc_score(y_test, y_test_predict_prob_pos)
print('auc_score of dtcl model on test data: ', auc_score_test)

fpr, tpr, thresholds = roc_curve(y_test, y_test_predict_prob_pos)

plt.plot([0, 1], [0, 1], linestyle = '--')
plt.plot(fpr, tpr, marker = '*')
plt.title('ROC curve of dtcl model on test data.')

print(pd.DataFrame(dtcl.feature_importances_, columns = ["Imp"], index = X_train.columns).sort_values('Imp', ascending = False))

# Decision tree visualization

text_representation = tree.export_text(dtcl)
print(text_representation)

train_char_label = ['No', 'Yes']

# Saving it to the file
with open("decistion_tree.log", "w") as fout:
    fout.write(text_representation)

# The plot_tree returns annotations for the plot, to not show them in the notebook I assigned returned value to _
fig = plt.figure(figsize=(25,20))
_ = tree.plot_tree(dtcl, feature_names = list(X_train), class_names = list(train_char_label), filled = True)

# To save the figure to the .png file:
fig.savefig("default_decistion_tree.png")

'''
train_char_label = ['No', 'Yes']
tree_regularized = open('tree_regularized.dot','w')
dot_data = tree.export_graphviz(dtcl, out_file= tree_regularized , feature_names = list(X_train), class_names = list(train_char_label))
tree_regularized.close()
dot_data
'''

# Regularized dtcl classifier

param_grid = {
    'criterion': ['gini'],
    'max_depth': [10,20,30,50],
    'min_samples_leaf': [50,100,150],
    'min_samples_split': [150,300,450],
}


grid_search = GridSearchCV(estimator = dtcl, param_grid = param_grid, cv = 10)
grid_search.fit(X_train, y_train)
print(grid_search.best_params_)
best_grid = grid_search.best_estimator_
best_grid

'''
train_char_label = ['No', 'Yes']
tree_regularized = open('tree_regularized_1.dot','w')
dot_data = tree.export_graphviz(best_grid, out_file= tree_regularized , feature_names = list(X_train), class_names = list(train_char_label))

tree_regularized.close()
dot_data
'''

# Regularized dtcl model's prediction on training data

y_train_predict = best_grid.predict(X_train)
y_train_predict

# Regularized dtcl model's performance on taining data

conf_train = pd.DataFrame(confusion_matrix(y_train, y_train_predict), columns = [['0', '1']], index = [['0', '1']])
conf_train

print(classification_report(y_train, y_train_predict))

# Regularized dtcl model's prediction probability on training data

y_train_predict_prob = best_grid.predict_proba(X_train)
y_train_predict_prob_pos = y_train_predict_prob[:, 1]
auc_score_train = roc_auc_score(y_train, y_train_predict_prob_pos)
print('auc_score of regularized dtcl model on training data: ', auc_score_train)

fpr, tpr, thresholds = roc_curve(y_train, y_train_predict_prob_pos)

plt.plot([0, 1], [0, 1], linestyle = '--')
plt.plot(fpr, tpr, marker = '*')
plt.title('ROC curve of regularized dtcl model on training data.')

# Regularized dtcl model's prediction on test data

y_test_predict = best_grid.predict(X_test)
y_test_predict

# Regularized dtcl model's performance on test data

conf_test = pd.DataFrame(confusion_matrix(y_test, y_test_predict), columns = [['0', '1']], index = [['0', '1']])
conf_test

print(classification_report(y_test, y_test_predict))

# Regularized dtcl model's prediction probability on test data

y_test_predict_prob = best_grid.predict_proba(X_test)
y_test_predict_prob_pos = y_test_predict_prob[:, 1]
auc_score_test = roc_auc_score(y_test, y_test_predict_prob_pos)
print('auc_score of regularized dtcl model on test data: ', auc_score_test)

fpr, tpr, thresholds = roc_curve(y_test, y_test_predict_prob_pos)

plt.plot([0, 1], [0, 1], linestyle = '--')
plt.plot(fpr, tpr, marker = '*')
plt.title('ROC curve of regularized dtcl model on test data.')

# Regularized Decision tree visualization

text_representation = tree.export_text(best_grid)
print(text_representation)

train_char_label = ['No', 'Yes']

# Saving it to the file
with open("regularized_decistion_tree.log", "w") as fout:
    fout.write(text_representation)

# The plot_tree returns annotations for the plot, to not show them in the notebook I assigned returned value to _
fig = plt.figure(figsize=(25,20))
_ = tree.plot_tree(best_grid, feature_names = list(X_train), class_names = list(train_char_label), filled = True)

# To save the figure to the .png file:
fig.savefig("regularized_decistion_tree.png")

"""The dataset on which the model was prepared contained data points out of which 69% are diabetic and 33% are non diabetic.

The default decision tree model (dtcl) is overfitting -
1.   100% train accuracy is a strong sign of overfitting.
2.   The model fails to generalize well, as test accuracy drops to 67% leading to a poor non-diabetic prediction (56.5%) in the test set.

The regularized decision tree model (best_grid) generalizes better -

1.   Lower train accuracy (75%) suggests it’s not memorizing the training data.
2.   Higher test accuracy (74%) means it performs better on unseen data.
3.   It improves non-diabetic classification accuracy significantly (68.6% using regularized decision tree model vs. 56.5% using the default decision tree model).

Hence the regularized decision tree model (best_grid) should be used for predicting unknown data points.
"""

