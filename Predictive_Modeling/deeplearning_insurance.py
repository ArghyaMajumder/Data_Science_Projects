# -*- coding: utf-8 -*-
"""DeepLearning_Insurance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dYFZphOJqKME8K8fOKvjik53GipFnDWw
"""

from google.colab import files, drive

upload = files.upload()

import pandas as pd
import numpy as np

import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping

insurance_df = pd.read_csv("insurance_part_data.csv")
insurance_df

# Retrieving info of the columns of insurance_df

insurance_df.info()

# Check for any missing values in insurance_df

insurance_df.isna().sum()

# Check for presence of duplicate rows in insurance_df

insurance_df[insurance_df.duplicated()]

# Drop duplicate rows

insurance_df.drop_duplicates(inplace = True)

print(f"Claimed status of insurance_df: \n{insurance_df['Claimed'].value_counts()}\n")
print(f"Claimed status of insurance_df: \n{insurance_df['Claimed'].value_counts(normalize = True)}\n")

plt.figure(figsize = (4, 3))
sns.histplot(x = 'Claimed', data = insurance_df)
plt.grid(visible = True)
plt.title("Claimed status in insurance_df")

"""* The dataset reveals a notable class imbalance in insurance claims, with 68% of instances (1944 out of 2858) classified as "No" (not claimed) and 32% (914 instances) as "Yes" (claimed)."""

print(f"Number of unique age in insurance_df: {insurance_df['Age'].nunique()}\n")
print(f"Unique age in insurance_df: {insurance_df['Age'].unique()}\n")
print(f"Count of each age in insurance_df:{insurance_df['Age'].value_counts()}\n")

plt.figure(figsize=(20, 6))
sns.histplot(x = 'Age', data = insurance_df)
plt.grid(visible = True)
plt.title("Histplot for the age of insured in insurance_df")

"""* The age of insured individuals spans a wide range (from 8 to 84 years), with a significant concentration around age 36 (880 instances).
This suggests a specific demographic dominates the customer base, which may influence claim patterns.
"""

plt.figure(figsize=(20, 6))
sns.histplot(x = 'Age', data = insurance_df, hue = 'Claimed', multiple = 'dodge')
plt.grid(visible = True)
plt.title("Histplot for the age of insured in insurance_df")

plt.figure(figsize=(10, 4))
sns.scatterplot(x = 'Age', y = 'Claimed', data = insurance_df)
plt.grid(visible = True)
plt.title("Scatterplot illustrating the distribution of the age of insured in insurance_df along with its claimed status")

"""* Histograms and scatterplots reveal that claim likelihood does not strongly correlate with age alone, though certain age groups (e.g., around 36) show higher claim frequencies due to their larger representation in the dataset."""

print(f"Distribution of commission in terms of count in insurance_df:{insurance_df['Commision'].value_counts()}\n")

plt.figure(figsize=(10, 6))
sns.histplot(x = 'Commision', data = insurance_df)
plt.grid(visible = True)
plt.title("Histplot illustrating the distribution the commission received for tour insurance in insurance_df")

"""* Commission values show a high frequency of zero (1239 instances), indicating many policies may be sold without commission."""

plt.figure(figsize=(10, 4))
sns.scatterplot(x = 'Commision', y = 'Claimed', data = insurance_df)
plt.grid(visible = True)
plt.title("Scatterplot illustrating the distribution of commission received for tour insurance along with its claimed status")

plt.figure(figsize=(12, 5))
sns.histplot(x = 'Commision', data = insurance_df, hue = 'Claimed', kde = True, multiple = 'fill')
plt.title("Displot illustrating the distribution of commission received for tour insurance along with its claimed status")

"""* Scatterplots and distribution plots suggest no clear linear relationship between commission amounts and claim status, though lower commission policies often align with non-claimed instances."""

# Sales by agency

total_sales_by_agency = insurance_df.groupby('Agency_Code')['Sales'].sum()
total_sales_by_agency = total_sales_by_agency.reset_index()
total_sales_by_agency

"""* Four agencies dominate total sales, with C2B (86067) leading followed by EPX (50350.02), CWT (31496.55 )& JZI (8632.87)."""

plt.figure(figsize = (10, 6))
sns.histplot(x = 'Sales', data = insurance_df, kde = True)
plt.grid(visible = True)
plt.title('Histplot illustrating the distribution of sales in insurance_df')

"""* Sales distribution highlights varied policy values with potential outliers"""

plt.figure(figsize = (10, 6))
sns.histplot(x = 'Sales', data = insurance_df, hue = 'Claimed', kde = True, multiple = 'fill')
plt.grid(visible = True)
plt.title('Histplot illustrating the distribution of sales for both claimed and unclaimed in insurance_df')

"""* Higher sales values appear to have a slight association with claimed status in histograms with KDE overlays, hinting that more expensive policies might be more likely to result in claims."""

print(f"Number of tour durations in insurance_df: {insurance_df['Duration'].nunique()}\n")
print(f"Duration and number of tours for the said duration in insurance_df:{insurance_df['Duration'].value_counts()}\n")

plt.figure(figsize=(10, 48))
sns.countplot(y = 'Duration', data = insurance_df)
plt.grid(visible = True)
plt.title("Histplot for the no of tours for each duration type in insurance_df")

"""* Tour durations vary widely (255 unique values), with shorter durations like 10 days (78 instances) being more common.
This variability suggests diverse travel plans among customers.
"""

plt.figure(figsize=(10, 48))
sns.countplot(y = 'Duration', data = insurance_df, hue = 'Claimed')
plt.ylabel('Duration')
plt.grid(visible = True)
plt.title("Histplot for the no of tours for each duration type along with insurance claimed status in insurance_df")

print(f"Number of tour firm selling tour insurance in insurance_df: {insurance_df['Agency_Code'].nunique()}\n")
print(f"Number of insurance sold by each tour firm in insurance_df:{insurance_df['Agency_Code'].value_counts()}\n")

plt.figure(figsize=(5, 3))
sns.histplot(x = 'Agency_Code', data = insurance_df)
plt.xlabel('Agency_Code')
plt.grid(visible = True)
plt.title("Histplot for the number of insurance sold by each tour firm in insurance_df")

"""* Four agencies dominate sales, with EPX selling the most (1238 policies), and five product types exist, with the Customized Plan leading (1070 instances) indicating a preference for certain agencies and products."""

plt.figure(figsize=(5, 3))
sns.histplot(x = 'Agency_Code', data = insurance_df, hue = 'Claimed', multiple = 'dodge')
plt.xlabel('Agency_Code')
plt.grid(visible = True)
plt.title("Histplot for the number of insurance sold by each tour firms along with the number of insurance claimed in insurance_df")

"""* Agency C2B show higher claims, but the proportion of claims varies across agencies, indicating agency-specific risk profiles or customer behaviors."""

plt.figure(figsize=(10, 4))
sns.histplot(x = 'Agency_Code', data = insurance_df, hue = 'Type', multiple = 'dodge')
plt.xlabel('Agency_Code')
plt.grid(visible = True)
plt.title("Histplot illustrating the type of tour insurance being sold by each tour firm in insurance_df")

"""* Agencies like C2B & JZI are Airlines whereas agencies like EPX & CWT are Travel Agency."""

plt.figure(figsize=(12, 4))
sns.histplot(x = 'Agency_Code', data = insurance_df, hue = 'Channel', multiple = 'dodge')
plt.xlabel('Agency_Code')
plt.grid(visible = True)
plt.title("Histplot illustrating the number of tour insurance sold by each agency through different channels in insurance_df")

"""* C2B & JZI sold insurance online.
* EPX & CWT sold the vast majority of insurance is sold online followed by offline.
"""

print(f"Type of tour insurance firms in insurance_df: {insurance_df['Type'].nunique()}\n")
print(f"Number of tours conducted by each type of tour insurance firm in insurance_df:{insurance_df['Type'].value_counts()}\n")

plt.figure(figsize=(5, 3))
sns.histplot(x = 'Type', data = insurance_df, )
plt.ylabel('Type')
plt.grid(visible = True)
plt.title("Histplot for the no of tours for each type of tour insurance firms in insurance_df")

"""* Travel Agencies (1709 instances) sell more through online channels compared to Airlines (1149 instances), with specific agencies like EPX heavily favoring online sales. This interaction highlights channel preferences based on agency type."""

plt.figure(figsize=(5, 3))
sns.histplot(x = 'Type', data = insurance_df, hue = 'Claimed', multiple = 'dodge')
plt.ylabel('Type')
plt.grid(visible = True)
plt.title("Histplot for the no of tours for each type of tour insurance firms along with insurance claimed status in insurance_df")

# Distribution channel of tour insurance agencies (Channel) Distibution channel

print(f"Number of channels through which the insurance firm is providing tour insurance: {insurance_df['Channel'].nunique()}\n")
print(f"Number of insurance bought through each channel: \n{insurance_df['Channel'].value_counts()}\n")

plt.figure(figsize=(5, 3))
sns.histplot(x = 'Channel', data = insurance_df)
plt.xlabel('Channel')
plt.grid(visible = True)
plt.title("Histplot illustrating the number of insurance bought through each channel in insurance_df")

plt.figure(figsize=(7, 4))
sns.histplot(x = 'Channel', data = insurance_df, hue = 'Agency_Code', multiple = 'dodge')
plt.ylabel('Channel')
plt.grid(visible = True)
plt.title("Histplot illustrating number of insurance sold by each tour firm through different channels in insurance_df")

plt.figure(figsize=(5, 4))
sns.histplot(x = 'Channel', data = insurance_df, hue = 'Type', multiple = 'dodge')
plt.xlabel('Channel')
plt.grid(visible = True)
plt.title("Histplot illustrating the type of tour insurance firm and number of insurance sold by them through different channels in insurance_df")

plt.figure(figsize=(5, 4))
sns.histplot(x = 'Channel', data = insurance_df, hue = 'Claimed', multiple = 'dodge')
plt.xlabel('Channel')
plt.grid(visible = True)
plt.title("Histplot illustrating the number of insurance bought through each channel with claimed status in insurance_df")

"""* The vast majority of insurance is sold online (2812 instances) compared to offline (46 instances), with online channels showing a slightly higher proportion of claims, possibly due to volume."""

# Name of the tour insurance products (Product)

print(f"Number of products sold by tour insurance firms: {insurance_df['Product Name'].nunique()}\n")
print(f"Sales of each product:\n{insurance_df['Product Name'].value_counts()}\n")

plt.figure(figsize=(12, 4))
sns.histplot(x = 'Product Name', data = insurance_df)
plt.xlabel('Product_Name')
plt.grid(visible = True)
plt.title("Histplot for the number of sales of each tour insurance products in insurance_df")

"""* Among the various products, Customised Plan were most sold followed by Bronze Plan, Cancellation Plan, Silver Plan & Gold Plan


"""

plt.figure(figsize=(12, 4))
sns.histplot(x = 'Product Name', data = insurance_df, hue = 'Agency_Code', multiple = 'dodge')
plt.xlabel('Product_Name')
plt.grid(visible = True)
plt.title("Histplot for the number of sales of each tour insurance products by each tour agency in insurance_df")

"""* Four agencies dominate sales, with EPX selling the most (1238 policies), and five product types exist, with the Customized Plan leading (1070 instances).

* Sales of Customized Plan is dominated by C2B, EPX & CWT.  

* Sales of Cancellation Plan is dominated by EPX.

* Sales of Bronze Plan is dominated by C2B, CWT & JZI.

* Sales of Silver Plan is dominated by C2B & CWT.

* Sales of Gold Plan is dominated by C2B & CWT.
"""

plt.figure(figsize=(12, 3))
sns.histplot(x = 'Product Name', data = insurance_df, hue = 'Channel', multiple = 'dodge')
plt.xlabel('Product_Name')
plt.grid(visible = True)
plt.title("Histplot for the number of sales of each tour insurance products through each distribution channel in insurance_df")

"""* The vast majority of insurance is sold online (2812 instances) compared to offline (46 instances)."""

plt.figure(figsize=(12, 3))
sns.histplot(x = 'Product Name', data = insurance_df, hue = 'Type', multiple = 'dodge')
plt.xlabel('Product_Name')
plt.grid(visible = True)
plt.title("Histplot for the number of sales of each tour insurance products by each insurance firm in insurance_df")

plt.figure(figsize=(12, 3))
sns.histplot(x = 'Product Name', data = insurance_df, hue = 'Claimed', multiple = 'dodge')
plt.xlabel('Product_Name')
plt.grid(visible = True)
plt.title("Histplot illustrating the claimed status for the each tour insurance products sold in insurance_df")

"""* Most of the claims came from the Silver Plan followed by Bronze Plan, Customized Plan Gold Plan & Cancellation Plan."""

# Destination of the tour (Destination)

print(f"Number of destinations in insurance firms: {insurance_df['Destination'].nunique()}\n")
print(f"Number of tours to each dstinations: \n{insurance_df['Destination'].value_counts()}\n")

plt.figure(figsize=(6, 4))
sns.histplot(x = 'Destination', data = insurance_df)
plt.xlabel('Destination')
plt.grid(visible = True)
plt.title("Histplot for the number of tours to each destination in insurance_df")

"""* Most of the tour insurance buyers are headed to Asia followed by Americas & Europe"""

plt.figure(figsize=(6, 4))
sns.histplot(x = 'Destination', data = insurance_df, hue = 'Agency_Code', multiple = 'dodge')
plt.xlabel('Destination')
plt.grid(visible = True)
plt.title("Histplot for the number of tours to each destination by each agency in insurance_df")

"""* People travelling to Asia bought their insurance from C2B, EPX, CWT & JZI.
* People travelling to Americas bought their insurance from EPX, CWT & JZI.
* People travelling to Eorope bought their insurance from EPX, CWT & JZI.
"""

plt.figure(figsize=(6, 4))
sns.histplot(x = 'Destination', data = insurance_df, hue = 'Type', multiple = 'dodge')
plt.xlabel('Destination')
plt.grid(visible = True)
plt.title("Histplot for the number of tours to each destination by each agency in insurance_df")

"""* Most people travelling to Asia, Americas & Europe bought their insurance through Travel Agency followed by Airlines"""

insurance_df.info()

insurance_df.describe()

plt.figure(figsize=(5, 5))
sns.boxplot(insurance_df[['Age', 'Commision', 'Duration', 'Sales']], orient = 'h')
plt.title("box plot for continuous variables")

"""* Age, Commision, Duration & Sales contains outliers"""

sns.pairplot(insurance_df, hue = 'Claimed')
plt.title("Pairplot with all continuous features in insurance_df")

plt.figure(figsize =(12, 6))
sns.heatmap(insurance_df[['Age', 'Commision', 'Duration', 'Sales']].corr(), annot = True)
plt.title("Heatmap illustrating the correlation among the continuous features in insurance_df")

"""* A heatmap of continuous variables (Age, Commission, Duration, Sales) shows a moderate positive correlation between Sales and Commission, suggesting that higher policy sales often yield higher commissions.
* Correlations with Age and Duration are weak, indicating limited linear relationships among these variables.

"""

# Converting the object types to categorical types

for feature in insurance_df.columns:
  if insurance_df[feature].dtype == 'object':
    print('feature: ', feature)
    print(pd.Categorical(insurance_df[feature].unique()))
    print(pd.Categorical(insurance_df[feature].unique()).codes)
    insurance_df.loc[:, feature] = pd.Categorical(insurance_df[feature]).codes
    print('\n\n')

insurance_df

# using dictionary to convert specific columns
convert_dict = {'Agency_Code': int,
                'Type': int,
                'Claimed': int,
                'Channel': int,
                'Product Name': int,
                'Destination': int}

insurance_df = insurance_df.astype(convert_dict)
insurance_df.info()

insurance_df.head(10)

# Separating the dependent and independent variables

X = insurance_df.drop('Claimed', axis = 1)
y = insurance_df['Claimed']

# Dividing the dependent and independent variables into train and test set

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 121)

print('X_train.shape: ', X_train.shape)
_train

print('y_train.shape: ', y_train.shape)
y_train

print('X_test.shape: ', X_test.shape)
X_test

print('y_test.shape: ', y_test.shape)
y_test

"""**Deep Learning Model**"""

dd_model = Sequential()

# Input
dd_model.add(Dense(512, activation = 'relu', input_dim = X_train.shape[1]))
dd_model.add(Dropout(0.25))

# Hidden
dd_model.add(Dense(256, activation = 'relu'))
dd_model.add(Dropout(0.25))

dd_model.add(Dense(128, activation = 'relu'))
dd_model.add(Dropout(0.25))

dd_model.add(Dense(64, activation = 'relu'))
dd_model.add(Dropout(0.25))

dd_model.add(Dense(32, activation = 'relu'))
dd_model.add(Dropout(0.25))

dd_model.add(Dense(16, activation = 'relu'))
dd_model.add(Dropout(0.25))

dd_model.add(Dense(8, activation = 'relu'))
dd_model.add(Dropout(0.25))

# Output
dd_model.add(Dense(1, activation = 'sigmoid'))

# Compilation
dd_model.compile(optimizer = 'adam', loss = 'binary_crossentropy')

early_stop = EarlyStopping(monitor = 'val_loss', mode = 'min', verbose = 1, patience = 25)

dd_model.fit(X_train, y_train, validation_data = (X_test, y_test), epochs = 300, callbacks = early_stop, verbose = 1)

dd_model_loss = pd.DataFrame(dd_model.history.history)
dd_model_loss

plt.figure(figsize = (7, 4))
dd_model_loss.plot()
plt.xlabel('epochs')
plt.ylabel('loss')
plt.title('Loss on train & validation set')
plt.show()

# Prediction on train data

y_train_predict_prob = dd_model.predict(X_train)

threshold = 0.50

y_train_predict = (y_train_predict_prob >= threshold).astype(int)
y_train_predict

# Confusion matrix on train set

cm_train = pd.DataFrame(confusion_matrix(y_train, y_train_predict))
cm_train

# Classification report on train data

print(classification_report(y_train, y_train_predict))

# roc_auc_score on train data

roc_score_train = roc_auc_score(y_train, y_train_predict_prob)
print(f"roc_auc_score on train data : {roc_score_train}")

# roc curve on train data

fpr, tpr, threshold = roc_curve(y_train, y_train_predict_prob)

plt.figure(figsize = (7, 4))
plt.plot([0, 1], [0, 1], linestyle = '--')
plt.plot(fpr, tpr, marker = '*')
plt.xlabel('fpr')
plt.ylabel('tpr')
plt.title('roc_curve of dd_model on train data')
plt.show()

# Prediction on test data

y_test_predict_prob = dd_model.predict(X_test)

threshold = 0.50

y_test_predict = (y_test_predict_prob >= threshold).astype(int)
y_test_predict

# Confusion matrix on test data

cm_test = pd.DataFrame(confusion_matrix(y_test, y_test_predict))
cm_test

# Classification report on test data

print(classification_report(y_test, y_test_predict))

# roc_auc_score on test data

roc_score_test = roc_auc_score(y_test, y_test_predict_prob)
print(f"roc_auc_score on test data : {roc_score_test}")

# roc curve on test data

fpr, tpr, threshold = roc_curve(y_test, y_test_predict_prob)

plt.figure(figsize = (7, 4))
plt.plot([0, 1], [0, 1], linestyle = '--')
plt.plot(fpr, tpr, marker = '*')
plt.xlabel('fpr')
plt.ylabel('tpr')
plt.title('roc_curve of dd_model on test data')
plt.show()

"""**Training Set Performance:**
1. The DeepLearning model achieves an accuracy of 0.78 on the training set.
2. Class 0 metrics are robust (precision=0.82, recall=0.87, F1-score=0.84), while Class 1 metrics are weak (precision=0.69, recall=0.59, F1-score=0.64).
3. The ROC AUC score is 0.82, demonstrating strong predictive power.

**Test Set Performance:**
1. On the test set, the accuracy remains steady at 0.78 .
2. Class 0 metrics are robust (precision=0.82, recall=0.88, F1-score=0.85), while class 1 metrics are weak (precision=0.67, recall=0.56, F1-score=0.61).
3. The ROC AUC score is 0.79, demonstrating almost strong predictive power.

**Analysis:** The DeepLearning  maintains consistent performance across training and test sets, suggesting good generalization capabilities. There is a drop in performance on the test set, particularly for class 1, indicating potential challenges in handling imbalanced data.
"""

